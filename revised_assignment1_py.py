# -*- coding: utf-8 -*-
"""Revised_Assignment1.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_0KQpo10-CYYsWi34Hu24tMjuqNf8f0x
"""

pip install haversine

from haversine import haversine
import csv
import numpy as np

print("Please make sure the two csv files are organized with longitude and latiude in seperate rows")
print("Also please make sure there are no other rows of numbers in the csv files")

First_CSV = input("Please enter the path for the first CSV file: ")
Second_CSV = input("Please enter the path for the second_CSV CSV file: ")

def makeArray(FILE):
  try:
    arr = []
    with open(FILE, 'r') as file:
        reader = csv.reader(file)
        header = next(reader)

        Longitude_Coordinates_Title = header.index('longitude')
        Latitude_Coordinates_Title = header.index('latitude')

        for row in reader:
            Longitude = float(row[Longitude_Coordinates_Title])
            Latitude = float(row[Latitude_Coordinates_Title])
            arr.append([Longitude, Latitude])

    return arr

  except ExceptionType:
    print("CSV file was not organized properly or file not found!")


arr1 = makeArray(First_CSV)
arr2 = makeArray(Second_CSV)

print(arr1)

# calculate distance for all points using haversine formula
# all distances will go into array distances
distances = []
for loc in arr1:
  for i in range(len(arr2)):
    distances.append(haversine(loc , arr2[i]))

# this functions will go through the array distances by the number
# of elements in each array at a time, this way it can find the
# smallest distance for each point
def findClosetPoints(distances):
    closetPoints = []
    for i in range(0, len(distances), len(arr1)):
        SetofDistances = distances[i : i + len(arr1)]
        closetPoints.append(SetofDistances.index(min(SetofDistances)))
    return closetPoints

# call function
closetPair = findClosetPoints(distances)

# print statements for results
for i in range(len(arr1)):
  print("Element " + str(i) + " in array 1 is closet to element " + str(closetPair[i]) + " in array 2")

# Test just in case
print(findClosetPoints(distances))